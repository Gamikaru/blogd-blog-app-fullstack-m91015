// _mixins.scss

// Mixin for Flex Centering
@mixin flex-center {
    display: flex;
    justify-content: center;
    align-items: center;
    flex: 1 1 auto; // Allow shrinking but keep proportions
}

@mixin flex-start {
    display: flex;
    justify-content: flex-start;
    align-items: center;
}

// Mixin for Box Shadows
@mixin card-shadow {
    box-shadow: $card-shadow;
}

// Mixin for Responsive Grids
@mixin responsive-grid($columns) {
    display: grid;
    grid-template-columns: repeat($columns, 1fr);
    gap: $spacing-unit;

    @media (max-width: $breakpoint-md) {
        grid-template-columns: repeat(2, 1fr);
    }

    @media (max-width: $breakpoint-sm) {
        grid-template-columns: 1fr;
    }
}

// Mixin for Button Styling
@mixin button-style($bg-color, $text-color) {
    background-color: if($bg-color != none, $bg-color, transparent);
    color: $text-color;
    padding: map-get($button-padding, md);
    border-radius: $button-border-radius;
    border: none;
    cursor: pointer;
    transition:
        background-color $transitions-base,
        color $transitions-base,
        opacity $transitions-base;
    display: flex;
    align-items: center;
    justify-content: flex-start;
    height: 38.4px;
    width: auto;
    max-width: 100%;
    font-family: $font-family-primary;
    font-size: $base-font-size;
    font-weight: 500;
    letter-spacing: 0.1px;
    text-transform: none;
    box-shadow: none;

    &:hover {
        background-color: if($bg-color != none, darken($bg-color, 10%), transparent);
        opacity: $button-opacity-default; // Slightly more opaque on hover
    }

    &:disabled,
    &.button-disabled {
        background-color: rgba(0, 0, 0, 0); // Maintain transparent background
        color: lighten($primary-text-color, 30%); // Lighter text color when disabled
        cursor: not-allowed; // Indicate disabled state
        opacity: $button-opacity-disabled; // Reduced opacity when disabled
    }
}

// Mixin for Button Variants
@mixin button-variant($variant-color, $bg-opacity: 0.1, $hover-bg-opacity: 0.2) {
    background-color: rgba($variant-color, $bg-opacity);
    color: $variant-color;

    &:hover {
        background-color: rgba($variant-color, $hover-bg-opacity);
        opacity: $button-opacity-hover; // Fully opaque on hover
    }

    &:disabled,
    &.button-disabled {
        background-color: rgba($variant-color, $bg-opacity);
        color: lighten($variant-color, 30%);
        cursor: not-allowed;
        opacity: $button-opacity-disabled;
    }
}

// Mixin for Heading Styles
@mixin heading-style($size, $font-family: $font-family-heading, $weight: 700) {
    font-size: $size;
    font-family: $font-family;
    font-weight: $weight;
    color: $primary-text-color;
    line-height: 1.2;
}

// Mixin for Card Style
@mixin card-style {
    background-color: $secondary-bg-color;
    border-radius: $border-radius;
    box-shadow: $card-shadow;
    padding: $card-padding;
    color: $primary-text-color;

    @include respond-to(md) {
        padding: map-get($spacing-scale, md);
    }

    @include respond-to(sm) {
        padding: map-get($spacing-scale, sm);
    }
}

// Responsive Typography Mixin
@mixin responsive-typography($small, $medium, $large) {
    font-size: $small;
    @include respond-to(sm) {
        font-size: $medium;
    }
    @include respond-to(lg) {
        font-size: $large;
    }
}

// Mixin for Media Queries
@mixin respond-to($breakpoint) {
    @media (max-width: map-get($breakpoints, $breakpoint)) {
        @content;
    }
}

// Mixin to Hide on Specific Breakpoint
@mixin hide-on($breakpoint) {
    @media (max-width: map-get($breakpoints, $breakpoint)) {
        display: none !important;
    }
}

// Mixin to Show on Specific Breakpoint
@mixin show-on($breakpoint) {
    display: none;

    @media (min-width: map-get($breakpoints, $breakpoint)) {
        display: block !important;
    }
}

// Mixin for Responsive Margin
@mixin responsive-margin($margin-xs, $margin-md, $margin-lg) {
    margin: $margin-xs;

    @include respond-to(sm) {
        margin: $margin-md;
    }

    @include respond-to(lg) {
        margin: $margin-lg;
    }
}

// Mixin for Responsive Padding
@mixin responsive-padding() {
    @include respond-to(xxs) {
        padding: $spacing-xxs;
    }

    @include respond-to(xs) {
        padding: $padding-xs;
    }
    @include respond-to(sm) {
        padding: $padding-sm;
    }

    @include respond-to(md) {
        padding: $padding-md;
    }

    @include respond-to(lg) {
        padding: $padding-lg;
    }
}

@mixin responsive-grid-auto($min-size) {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax($min-size, 1fr));
    gap: $spacing-unit;
}

// Mixin for Container
@mixin container {
    width: 100%;
    max-width: map-get($container-max-widths, sm);
    margin: 0 auto;
    padding: 0 map-get($spacing-scale, sm);

    @include respond-to(md) {
        max-width: map-get($container-max-widths, md);
    }

    @include respond-to(lg) {
        max-width: map-get($container-max-widths, lg);
    }

    @include respond-to(xl) {
        max-width: map-get($container-max-widths, xl);
    }

    @include respond-to(xxl) {
        max-width: map-get($container-max-widths, xxl);
    }
}

// Mixin for Fluid Typography
@mixin fluid-font-size($min-size, $max-size) {
    font-size: $min-size;

    @media (min-width: map-get($breakpoints, xxs)) and (max-width: map-get($breakpoints, xxl)) {
        font-size: calc(#{$min-size} + (#{$max-size} - #{$min-size}) * ((100vw - 320px) / (1440 - 320)));
    }

    @media (min-width: map-get($breakpoints, xxl)) {
        font-size: $max-size;
    }
}

@mixin page-title {
    @include heading-style($heading-font-size-xxlg);
    font-weight: bold;
    color: $primary-text-color;
    margin: 0;
    margin-left: $spacing-xs;
    padding-inline: px-to-rem(50);
}

@mixin page-subtitle {
    font-size: clamp(1rem, 2.5vw, 1.5rem);
    font-family: $font-family-primary;
    font-style: italic;
    color: $secondary-text-color;
    margin-top: $spacing-sm;
    line-height: 1.6;
}
